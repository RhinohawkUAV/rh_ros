<launch>
  <!--
    Set the "CAMERA_NAME" environment variable to specify the calibration file:
    CAMERA_NAME=chameleon3 roslaunch rh_autonomy rh.launch  
    CAMERA_NAME=solo4zoom roslaunch rh_autonomy rh.launch  
  -->

  <arg name="fcu_url" default="udp://:14550@"/>
  <arg name="gcs_url" default="udp://:14558@:14570" />
  <arg name="tgt_system" default="1" />
  <arg name="tgt_component" default="1" />
  <arg name="log_output" default="screen" />

  <!-- For PointGrey Chameleon3 -->
  <arg name="camera_serial" default="0" />

  <param name="mavros/system_id" type="int" value="255"/>
  <param name="mavros/component_id" type="int" value="240"/>
  
  <include file="$(find mavros)/launch/node.launch">
    <arg name="pluginlists_yaml" value="$(find mavros)/launch/apm_pluginlists.yaml" />
    <arg name="config_yaml" value="$(find rh_autonomy)/launch/apm_config.yaml" />
    <arg name="fcu_url" value="$(arg fcu_url)" />
    <arg name="gcs_url" value="$(arg gcs_url)" />
    <arg name="tgt_system" value="$(arg tgt_system)" />
    <arg name="tgt_component" value="$(arg tgt_component)" />
    <arg name="log_output" value="$(arg log_output)" />
  </include>

  <arg name="cname" value="$(optenv CAMERA_NAME gopro)"/>
 
  <!-- GSCAM node for 3dr Solo Camera -->
  <group unless="$(eval cname == 'chameleon3')"> 

      <env name="GSCAM_CONFIG" value='udpsrc port=5600 caps="application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264" ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw ' />
      <node pkg="gscam" type="gscam" name="camera">
        <param name="camera_name" value="$(arg cname)" />
        <param name="camera_info_url" value="package://camera_driver/calibrations/${NAME}.yaml" />
        <remap from="camera/image_raw" to="/camera/image_raw" />
      </node>
      
      <node pkg="obc_solo" type="request-video-stream.py" name="solo_video_stream" ns="camera"/>
      
  </group>

  <!-- Chameleon3 Camera -->
  <group if="$(eval cname == 'chameleon3')" ns="camera">
  
    <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

    <node pkg="nodelet" type="nodelet" name="camera_nodelet"
          args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
      <param name="camera_name" value="$(arg cname)" />
      <param name="frame_id" value="camera" />
      <param name="serial" value="$(arg camera_serial)" />

      <!-- When unspecified, the driver will use the default framerate as given by the
           camera itself. Use this parameter to override that value for cameras capable of
           other framerates. -->
      <!-- <param name="frame_rate" value="15" /> -->

      <!-- Use the camera_calibration package to create this file -->
      <param name="camera_info_url"
             value="package://camera_driver/calibrations/chameleon3.yaml" />

      <remap from="camera/image_raw" to="/camera/image_raw" />
    </node>

    <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
    </node>
  </group>

  <node pkg="image_proc" type="image_proc" name="image_proc" ns="camera">
    <remap from="image" to="image_raw"/>
  </node>

  <node pkg="rh_vision" type="aruco_detector.py" name="aruco_detector" ns="/rh/vision">
	<remap from="image" to="/camera/image_rect"/>
  </node>

  <node pkg="rh_vision" type="image_to_target.py" name="image_to_target" ns="/rh/vision">
    <remap from="image_location" to="/vision/aruco/location"/>
    <remap from="camera_info" to="/camera/camera_info"/>
  </node>

  <!-- Publish static frame translation from quad to camera -->
  <!-- Camera mounted on the front of the quad and pitched down 90 degrees -->
  <!-- the quaternion in args has scalar part last!!!  
   Parameters:
    (x,y,z) - camera pose relative to fcu in meters (front, left, up)
    (qx, qy, qz, qw) - quaterion for camera orientation
    frame_id, child_frame_id - names of coordinate frames
    period in ms -->
  <node pkg="tf" type="static_transform_publisher" name="gopro_link_broadcaster" ns="/camera"
      args="0.11 0 0.001     0.  0.70710678  0. 0.70710678    fcu gopro 200"/>

  <!-- rhinohawk mission nodes -->

  <node pkg="rh_autonomy" type="flight.py" name="flight" ns="rh" output="screen"/>
  <node pkg="rh_autonomy" type="state.py" name="state" ns="rh" output="screen"/>
  <node pkg="rh_autonomy" type="controller.py" name="controller" ns="rh" output="screen"/>

</launch>
