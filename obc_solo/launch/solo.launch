<launch>
  <!--
    Set the "CAMERA_NAME" environment variable to specify the calibration file:
    CAMERA_NAME=solo4zoom roslaunch obc_solo solo.launch
    CAMERA_NAME=gopro  roslaunch obc_solo solo.launch
  -->
  <!-- mavros as proxy -->
  <!--
  <arg name="fcu_url" default="udp://:14550@"/>
  <arg name="gcs_url" default="udp://:14558@localhost:14570" />
-->

  <!-- mavros as companion -->
  <arg name="fcu_url" default="udp://:14540@localhost:14557"/>

  <!-- QGroundControl proxy.  QGC on same host -->
  <arg name="gcs_url" default="udp://:14558@localhost:14570" />
  <arg name="tgt_system" default="1" />
  <arg name="tgt_component" default="1" />
  <arg name="log_output" default="screen" />

  <include file="$(find mavros)/launch/node.launch">
    <arg name="pluginlists_yaml" value="$(find mavros)/launch/apm_pluginlists.yaml" />
    <arg name="config_yaml" value="$(find obc_solo)/launch/apm_config.yaml" />

    <arg name="fcu_url" value="$(arg fcu_url)" />
    <arg name="gcs_url" value="$(arg gcs_url)" />
    <arg name="tgt_system" value="$(arg tgt_system)" />
    <arg name="tgt_component" value="$(arg tgt_component)" />
    <arg name="log_output" value="$(arg log_output)" />
  </include>

  <!-- GSCAM node -->
  <arg name="cam_node_name" value="gopro"/>
  <env name="GSCAM_CONFIG" value='udpsrc port=5600 caps="application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264" ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw ' />
  <node pkg="gscam" type="gscam" name="$(arg cam_node_name)">
    <param name="camera_name" value="$(optenv CAMERA_NAME gopro)" />
    <param name="camera_info_url" value="package://camera_driver/calibrations/${NAME}.yaml" />
    <remap from="camera/image_raw" to="$(arg cam_node_name)/image_raw" />
  </node>

  <node pkg="obc_solo" type="request-video-stream.py" name="solo_video_stream" ns="gopro"/>

  <node pkg="image_proc" type="image_proc" name="image_proc" ns="gopro">
    <remap from="image" to="image_raw"/>
  </node>

  <node pkg="camera_driver" type="aruco_detector.py"   name="aruco_detector"   ns="gopro">
	<remap from="image" to="image_rect"/>
  </node>

  <node pkg="camera_driver" type="image_to_target.py"   name="image_to_target" ns="gopro">
    <remap from="image_location" to="/gopro/landing_box_location"/>
    <remap from="camera_info" to="/gopro/camera_info"/>
  </node>

  <!-- Publish static frame translation from quad to camera -->
  <!-- Camera mounted on the front of the quad and pitched down 90 degrees -->
  <!-- the quaternion in args has scalar part last!!!  -->
   Parameters:
    (x,y,z) - camera pose relative to fcu in meters (front, left, up)
    (qx, qy, qz, qw) - quaterion for camera orientation
    frame_id, child_frame_id - names of coordinate frames
    peroid in ms
  <node pkg="tf" type="static_transform_publisher" name="gopro_link_broadcaster"
	args="0.11 0 0.001     0.  0.70710678  0. 0.70710678    fcu gopro 200"
	/>

</launch>
